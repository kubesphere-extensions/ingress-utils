apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "ingress-utils.selectorLabels" . | nindent 4 }}
  name: {{ include "ingress-utils.fullname" . }}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  progressDeadlineSeconds: 600
  replicas: {{ .Values.controller.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "ingress-utils.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ingress-utils.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ template "ingress-utils.serviceAccountName" . }}
      {{- include "controller.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      containers:
        - name: controller-manager
          image: {{ template "controller-manager.image" . }}
          imagePullPolicy: {{ .Values.controller.image.pullPolicy }}
          {{- if .Values.controller.containerPorts }}
          ports: {{- include "common.tplvalues.render" (dict "value" .Values.controller.containerPorts "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.controller.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.controller.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.controller.resources }}
          resources: {{- toYaml .Values.controller.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: webhook-secret
            - mountPath: /etc/localtime
              name: host-time
              readOnly: true
      volumes:
        - name: webhook-secret
          secret:
            defaultMode: 420
            secretName: ingress-utils-controller-manager-webhook-cert
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
